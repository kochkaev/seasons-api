plugins {
//    id "com.github.johnrengelman.shadow" version "7.0.0"
//    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id 'fabric-loom' version '1.10.1'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
////String pass = System.getenv().findResult(findNameStartsWith('PASS'))
ext {
    pass = findProperty('pass') ?: ''
}

//architectury {
//    platformSetupLoomIde()
//    fabric()
//}

//configurations {
//    common
//    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
//    compileClasspath.extendsFrom common
//    runtimeClasspath.extendsFrom common
//    developmentFabric.extendsFrom common
//}

//base {
//    archivesName = project.archives_base_name
//}

loom {
    splitEnvironmentSourceSets()

    mods {
        "seasons-api" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
repositories {
    maven {
        name = "Nucleoid"
        url = "https://maven.nucleoid.xyz/"
    }
    maven { url = 'https://maven.shedaniel.me/' }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings "net.fabricmc:yarn:${project.fabric_yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation "eu.pb4:placeholder-api:${project.placeholderapi_version}"
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }

    include(implementation("net.kyori:adventure-api:${project.property("adventure_version")}"))
    include(implementation("net.kyori:adventure-text-minimessage:${project.property("adventure_version")}"))
    include(implementation("net.kyori:adventure-text-serializer-gson:${project.property("adventure_version")}") {
        exclude(module: "gson")
    })
    include(implementation("net.kyori:adventure-text-serializer-json:${project.property("adventure_version")}") {
        exclude(module: "gson")
    })
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.fabric_loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.fabric_loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

//shadowJar {
//    configurations = [project.configurations.shadowCommon]
//    classifier "shadow"
//}

//remapJar {
//    input.set(shadowJar.archiveFile)
//    dependsOn(shadowJar)
//    archiveClassifier = "fabric"
//
//    from rootProject.file("LICENSE.txt")
//}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = 'https://maven.pkg.github.com/kochkaev/seasons-api'
            credentials {
                username = "kochkaev"
                password = pass
            }

        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }

}
